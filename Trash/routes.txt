"""
@app.route('/api/clear/not_found', methods=['GET'])
def clear_not_found():
    Tracker.query.filter_by(url="/not_found").delete()
    db.session.commit()
    return redirect(url_for('index'))


@app.route('/admin/autograph_corrections', methods=['GET'])
def admin_run_correction():

    # not "abgeschlossen"
    cards = BullingerDB.get_most_recent_only(db.session, Kartei).subquery()
    index = {i[0]: True for i in db.session.query(cards.c.id_brief).filter(cards.c.status != "abgeschlossen")}

    # Autograph corrections
    auto = BullingerDB.get_most_recent_only(db.session, Autograph)
    copy = BullingerDB.get_most_recent_only(db.session, Kopie)

    with open("Data/Corrections/kopie_standort.txt", 'a') as out:
        for c in copy:
            first = c.standort
            if c.standort: c.standort = re.sub(r"\s+", " ", c.standort).strip()

            if c.standort and c.id_brief in index:
                if c.standort == "Z ZB": c.standort = "Zürich ZB"
                if c.standort == "ZB": c.standort = "Zürich ZB"

                # remove leading junk
                m = re.match(r"^([,.:;_\-\s!]+).*", c.standort)
                if m: c.standort = c.standort.replace(m.group(1), "").strip()

                # standort
                m = re.match(r"^([Ss]\s*t\s*a\s*n\s*d\s*o\s*r\s*t).*", c.standort)
                if m: c.standort = c.standort.replace(m.group(1), "").strip()

                # MHStA
                if c.standort in ["Marburg H StA", "Marburg HStA", "Marburg Hess StA", "Marburg, H StA",
                                  "Marburg, Hess StA", "Marburg. Hess. StA"]:
                    c.standort = "Marburg, Hess. StA"

            if c.standort != first:
                out.write("Standort:\t"+first+"\t-->\t"+c.standort+"\n")
                print("Standort:\t"+first + "\t-->\t" + c.standort)
                db.session.commit()

    with open("Data/Corrections/autograph_standort.txt", 'a') as out:
        for a in auto:
            first = a.standort

            # ALLE
            if a.standort: a.standort = re.sub(r"\s+", " ", a.standort).strip()
            if a.standort in ["Genf BFU"]: a.standort = "Genf BPU"
            if a.standort in ["Zurich, StA", "Zürich, StA", "Zürich St A", "Zürich St. A.", "Zürich St.A.",
                              "Zurich. StA", "Zurick StA"]: a.standort = "Zürich StA"
            if a.standort in ["St.Gallen", "St. Gallen."]: a.standort = "St. Gallen"

            # noch nicht korrigierte
            if a.standort and a.id_brief in index:

                # remove leading junk
                m = re.match(r"^([,.:;_\-\s!]+).*", a.standort)
                if m: a.standort = a.standort.replace(m.group(1), "").strip()

                # standort
                m = re.match(r"^([Ss]\s*t\s*a\s*n\s*d\s*o\s*r\s*t).*", a.standort)
                if m: a.standort = a.standort.replace(m.group(1), "").strip()

                # Zürich StA
                if a.standort in ["Züriek, StA", "Zürieh, StA", "Ziirich. StA", "üricb. StA", "üricli, StA", "üridi StA",
                                  "Zürik StA", "Zürieh. StA", "zürich StA", "ürih StA", "StA", "Züriek. StA",
                                  "Ziirich. StA", "Zürich, StA", "Ziirich.StA", "Züricllf StA", "Züriek. StA", "Zürich,SU",
                                  "Zurich, StA", "Züriek StA", "Zürieh.StA", "Züriek , StA", "Zurick StA", "ZÜrieh StA",
                                  "Züriek.StA", "2 ürich, StA", "Bürich, StA", "Zürich, 4.", "Züroch, StA", "2cich StA",
                                  "Züriek StA", "Zürick, StA", "Zürich", "2Ürih, StA", "ZürichStA", "Züriek , StA",
                                  "St.A.", "2ürih, StA", "Zürich St.A.", "ürieh, StA", "Ziiriek, StA", "2ürioll StA",
                                  "Zurich.StA", "Ziirek StA", "Zür4eh, StA", "Zurick StA", "Züriell, StA", "Zurich. StA",
                                  "Zürlek, StA", "Zürik, StA", "Zürich. StA", "Zurich, StA", "ZurichStA", "Zürich ,SU",
                                  "Zürich, SU", "tA", "( _.. . , . Zürich StA", "( d) : Zürich. StA",
                                  "(5.Aug.) Zürich StA", "(Entwurf Bullingea Zürich StA", "Biirich StA", "Bü Zürich, StA",
                                  "Eüricb, StA", "zürich StA", "zürich, StA", "Zurich, StA", "Zürich , StA", "zürich- StA",
                                  "zürich , StA", "s nHo Zürich StA", "j Zürich, StA", "SSiricb. StA", "Uürich, StA",
                                  "Zürich StA.", "Zürich StA-,", "Zürich StA-", "Zürioh StA", "Züriek, StA"]:
                    a.standort = "Zürich StA"

                # Genf BPU
                if a.standort in ["Genf BHJ", "Genf BRJ", "Genf BFU", "Genf EPU", "Genf BPT", "Genf EFU", "Genf BRU",
                                  "Genf BKJ", "G nf BFU", "G f BHJ", "G BPU", "Genf BFU f", "Genf BFU, WWt-", "Genf BFÜ",
                                  "Genf BFÜ,", "Genf BFü", "Genf BTU", "Genf EPü", "Genf HPU", "Genf BRJ", "Genf BPÜ",
                                  "Genf BTU",]:
                    a.standort = "Genf BPU"

                if a.standort in ["Schaffausen StB", "Schaff hausen StB", "Schaafhausen StB", "SctLaffh.ausen StB"]:
                    a.standort = "Schaffhausen StB"

                # Marburg HStA
                if a.standort in ["Marburg, Hess. StA", "Marburg, Hess StA", "Marburg Hess. StA", "Marburg H StA",
                                  "Marburg HStA", "Marburg, Hess . StA", "S Hess StA"]:
                    a.standort = "Marburg, Hess. StA"

                for r in ["G f pu", "Gdnf BRJ", "Genf 1P?2", "Genf 1PÜ", "Genf 3?ui", "Genf BFU", "Genf BFÜ",
                          "Genf BHJ", "Genf BPTJ", "Genf BPU", "Genf BPtJ", "Genf BTU", "Genf BiPU", "Genf EFU",
                          "Genf EPU", "Genf EPtJ", "Genf HPU", "Genf KPU", "Genf PU", "Genf Uu", "Genf fcru",
                          "Genf iTw", "Genf tTu", "Geni BFü", "Genf BPÜ", "Genf BRJ"]:
                    if r in a.standort: a.standort = a.standort.replace(r, "Genf BPU").strip()

                if a.standort in ["Zürich, ZB", "Zürich,Z", "Zürieh. ZB", "Züriek. ZB", "Züroch, ZB",
                                  "(Entwurf: Zürich ZB"]:
                    a.standort = "Zürich ZB"

                # Basel UB
                if a.standort in ["Basel TJB", "BS61 UB", "Basel ÜB -", "Bssl UB"]: a.standort = "Basel UB"

                # St. Gallen
                m = re.match(r".*([Ss]\s*t\s*\.?\s*G?\s*a\s*l\s*l\s*e\s*n\s*S?t?B?K?B?).*", a.standort)
                if m: a.standort = a.standort.replace(m.group(1), "St. Gallen").strip()

                # Zürich StA +
                m = re.match(r"(Z.*A)", a.standort)
                if m:
                    if m.group(1) != "Zürich StA":
                        a.standort = a.standort.replace(m.group(1), "Zürich StA")

                # Zürich ZB
                m = re.match(r"(.*Z.*Z[BI]?).*", a.standort)
                if m:
                    if a.standort != "Zürich ZB":
                        a.standort = a.standort.replace(m.group(1), "Zürich ZB")

                m = re.match(r"(.*ZB).*", a.standort)
                if m:
                    if a.standort != "Zürich ZB":
                        a.standort = a.standort.replace(m.group(1), "Zürich ZB")

                m = re.match(r"Zürich ZB(.+)", a.standort)
                if m:
                    if a.signatur: a.signatur = (a.signatur + " " + m.group(1)).strip()
                    else: a.signatur = m.group(1)
                    out.write("Signatur:\t"+first + "\t-->\t" + a.signatur + "\n")
                    print("Signatur:\t" + first + "\t-->\t" + a.signatur)
                    a.standort = "Zürich ZB"

                m = re.match(r"St. Gallen ?K?B?(.+)", a.standort)
                if m:
                    if a.signatur: a.signatur = (a.signatur + " " + m.group(1)).strip()
                    else: a.signatur = m.group(1)
                    out.write("Signatur:\t"+first + "\t-->\t" + a.signatur + "\n")
                    print("Signatur:\t" + first + "\t-->\t" + a.signatur)
                    a.standort = "St. Gallen"

                m = re.match(r"Genf BPU(.+)", a.standort)
                if m:
                    if a.signatur: a.signatur = (a.signatur + " " + m.group(1)).strip()
                    else: a.signatur = m.group(1)
                    out.write("Signatur:\t"+first + "\t-->\t" + a.signatur + "\n")
                    print("Signatur:\t" + first + "\t-->\t" + a.signatur)
                    a.standort = "Genf BPU"

                m = re.match(r"Zürich StA(.+)", a.standort)
                if m:
                    for s in ["EU", "Eil", "Eli"]:
                        if s in m.group(1):
                            signatur = m.group(1).replace(s, "E II")
                            if a.signatur:
                                a.signatur = (a.signatur + " " + signatur).strip()
                            else: a.signatur = signatur
                            out.write("***:\t"+first + "\t-->\t" + a.signatur + "\n")
                            print("***:\t" + first + "\t-->\t" + a.signatur)
                    a.standort = "Zürich StA"

            if a.standort != first:
                out.write("Standort:\t"+first+"\t-->\t"+a.standort+"\n")
                print("Standort:\t"+first + "\t-->\t" + a.standort)
                db.session.commit()
    """
    """
    auto = BullingerDB.get_most_recent_only(db.session, Autograph)
    for a in auto:
        if a.standort:

            if a.standort == "Genf BHJ"\
                    or a.standort == "Genf BRJ"\
                    or a.standort == "Genf BFU"\
                    or a.standort == "Genf EPU" \
                    or a.standort == "Genf BPT" \
                    or a.standort == "Genf EFU" \
                    or a.standort == "Genf BRU": a.standort = "Genf BPU"
            a.standort = a.standort.replace("Standort", "")
            a.standort = a.standort.replace("standort", "")
            db.session.commit()

    auto = BullingerDB.get_most_recent_only(db.session, Kopie)
    for a in auto:
        if a.standort:
            print(a.id_brief)
            a.standort = re.sub(r"\s+", " ", a.standort).strip()
            m = re.match(r"^([.,_\s!-]+).*", a.standort)
            if m: a.standort = a.standort.replace(m.group(1), "")
            if a.standort in ["Züriek, StA",
            "Zürieh, StA", "Ziirich. StA"
            "Zürik StA", "Zürieh. StA",
            "StA", "Züriek. StA"
            "Ziirich.StA", "Züricllf StA",
            "Zurich, StA", "Züriek StA"
            "Zürieh.StA", "Züriek , StA"
            "Züriek.StA", "2 ürich, StA"
            "Züroch, StA", "2cich StA"
            "Zürich", "2Ürih, StA"
            "St.A.", "2ürih, StA"
            "Ziiriek, StA", "2ürioll StA"
            "Zurich.StA", "Ziirek StA"
            "Zür4eh, StA", "Zurick StA"
            "Züriell, StA", ""
            "Zürlek, StA",]:
                a.standort = "Zürich StA"
            a.standort = a.standort.replace("Standort", "")
            a.standort = a.standort.replace("standort", "")
            if a.standort == "ZB": a.standort = "Zürich ZB"
            if a.standort == "Z ZB": a.standort = "Zürich ZB"
            db.session.commit()
    """
    return redirect(url_for('index', next=request.url))

@app.route("/admin/print_pl", methods=["GET"])
def print_literature_printed():

    # all (alpha)
    with open("Data/Test/gedruckt_alle.txt", "w") as out:
        kar = BullingerDB.get_most_recent_only(db.session, Kartei).subquery()
        ged = BullingerDB.get_most_recent_only(db.session, Gedruckt).subquery()
        ged = db.session.query(
            kar.c.status,
            ged.c.id_brief,
            ged.c.gedruckt
        ).outerjoin(ged, ged.c.id_brief == kar.c.id_brief)\
         .order_by(ged.c.gedruckt)
        for g in ged:
            if g.gedruckt: out.write(str(g.id_brief) + "\t" + g.gedruckt.replace("\n", " ") + "\n")
    with open("Data/Test/literatur_alle.txt", "w") as out:
        kar = BullingerDB.get_most_recent_only(db.session, Kartei).subquery()
        lit = BullingerDB.get_most_recent_only(db.session, Literatur).subquery()
        lit = db.session.query(
            kar.c.status,
            lit.c.id_brief,
            lit.c.literatur
        ).outerjoin(lit, lit.c.id_brief == kar.c.id_brief)\
         .order_by(lit.c.literatur)
        for l in lit:
            if l.literatur: out.write(str(l.id_brief) + "\t" + l.literatur.replace("\n", " ") + "\n")

    # quit (alpha)
    with open("Data/Test/gedruckt_abgeschlossen.txt", "w") as out:
        kar = BullingerDB.get_most_recent_only(db.session, Kartei).subquery()
        ged = BullingerDB.get_most_recent_only(db.session, Gedruckt).subquery()
        ged = db.session.query(
            kar.c.status,
            ged.c.id_brief,
            ged.c.gedruckt
        ).outerjoin(ged, ged.c.id_brief == kar.c.id_brief)\
         .filter(kar.c.status == "abgeschlossen")\
         .order_by(ged.c.gedruckt)
        for g in ged:
            if g.gedruckt: out.write(str(g.id_brief) + "\t" + g.gedruckt.replace("\n", " ") + "\n")
    with open("Data/Test/literatur_abgeschlossen.txt", "w") as out:
        kar = BullingerDB.get_most_recent_only(db.session, Kartei).subquery()
        lit = BullingerDB.get_most_recent_only(db.session, Literatur).subquery()
        lit = db.session.query(
            kar.c.status,
            lit.c.id_brief,
            lit.c.literatur
        ).outerjoin(lit, lit.c.id_brief == kar.c.id_brief)\
         .filter(kar.c.status == "abgeschlossen")\
         .order_by(lit.c.literatur)
        for l in lit:
            if l.literatur: out.write(str(l.id_brief) + "\t" + l.literatur.replace("\n", " ") + "\n")

    return redirect(url_for('index'))

'''
@app.route('/api/post_process', methods=['GET'])
def post_process():
    BullingerDB.post_process_db()
    return jsonify(BullingerDB.get_persons_by_var(None, None))


@app.route('/admin/run_corrections', methods=['GET'])
@login_required
def run_corrections():
    if is_admin():
        name_corrections_general = [
            [[None, "Matthias", "Reichenweier"], ["Erb", "Matthias", "Reichenweier"]],
            [[None, "Mathias", "Reichenweier"], ["Erb", "Mathias", "Reichenweier"]],
            [[None, "Mathias", "Rappoltsweiler"], ["Erb", "Mathias", "Rappoltsweiler"]],
            [[None, "Matthias", "Rappoltsweiler"], ["Erb", "Matthias", "Rappoltsweiler"]],
            [[None, "Mathias", None], ["Erb", "Mathias", None]],
            [[None, "Richard", "London"], ["Cox", "Richard", "London"]],
            [[None, "Richard", "Westminster"], ["Cox", "Richard", "Westminster"]],
            [[None, "Richard", None], ["Cox", "Richard", None]],
            [["Chur", None, None], ["Egli", "Tobias", None]],
            [["Schlüsselberger", None, "Girenbad"], ["Schlüsselberger", "Gabriel", "Girenbad"]],
            [[None, "Stetten Georg", "Augsburg"], ["von Stetten", "Georg", "Augsburg"]],
            [["Stetten", "Georg rem", "Augsburg"], ["von Stetten", "Georg", "Augsburg"]],
            [["Stetten", "Georg vog", "Augsburg"], ["von Stetten", "Georg", "Augsburg"]],
            [["Stetten", "Georg rem", "Augsburg"], ["von Stetten", "Georg", "Augsburg"]],
            [["Stottern", "Georg vom", "Augsburg"], ["von Stetten", "Georg", "Augsburg"]],
            [["Johannes", "Georgiern", "Bern"], ["Haller", "Johannes", "Bern"]],
            [["", "Johannes", "Bern"], ["Haller", "Johannes", "Bern"]],
            [[None, "Lasco Johannes", "London"], ["Lasco", "Johannes", "Bern"]],
            [[None, "Lasco Johannes", "Emden"], ["Lasco", "Johannes", "Emden"]],
            [["Stetten", "Georg Ton", "Augsburg"], ["von Stetten", "Georg", "Augsburg"]],
            [[None, "Bellievre Jean", "Augsburg"], ["de Bellièvre", "Jean", "Solothurn"]],
            [[None, "Antorff Antwerpen", "Neue Zeitung"], ["Uss", "Antorff (Antwerpen)", "(Neue Zeitung)"]],
            [[None, "Chur", "Neue Zeitung"], ["Uss", "Chur", "Neue Zeitung"]],
            [[None, "Stetten Georg dJ", "Augsburg"], ["von Stetten", "Georg der Jüngere", "Augsburg"]],
            [[None, "Wittgenstein Ludwig", "Heidelberg"], ["Wittgenstein", "Ludwig", "Heidelberg"]],
            [[None, "llicius Philipp", "Chur"], ["Gallicius", "Philipp", "Chur"]],
            [[None, "lvin Johannes", "Genf"], ["Calvin", "Johannes", "Genf"]],
            [["BlarerAmbrosius", None, "Winterthur"], ["Blarer", "Ambrosius", "Winterthur"]],
            [["Schenk", None, "Augsburg"], ["Schenck", "Matthias", "Augsburg"]],
            [["Sozin", None, "Basel"], ["Sozin", "Laelius", "Basel"]],
            [["StGallen", "Prediger", "St. Gallen"], ["Prediger", None, "St. Gallen"]],
            [["StGaller", "Prediger", "St. Gallen"], ["Prediger", None, "St. Gallen"]],
            [["StGaller", "Geistliche", "St. Gallen"], ["Geistliche", None, "St. Gallen"]],
            [["firner", "Johann Konrad", "Schaffhausen"], ["firner", "Johann Konrad", "Ulmer"]],
            [["luSlnger", "Bs Rudolf", None], ["Bullinger", "Hans Rudolf", None]],
            [["luiliier", "Hans Rudolf", None], ["Bullinger", "Hans Rudolf", None]],
            [["lullInger", "Haus Rudelf", None], ["Bullinger", "Hans Rudolf", None]],
            [["lullInger", "Sans Budelf", None], ["Bullinger", "Hans Rudolf", None]],
            [["lullingr", "Harns Bmdelf", None], ["Bullinger", "Hans Rudolf", None]],
            [["lulllager", "ams Rudolf", None], ["Bullinger", "Hans Rudolf", None]],
        ]
        name_corrections = [
            [['Efll', 'feil'], ['Egli']],
            [['Finok'], ['Finck']],
            [['Schüler'], ['Schuler']],
            [['Fabrieus', 'Fabriim', 'Fihbri', 'Fabrieins', 'Fabrieiu', 'Fabrlelms', 'Fafcrieius', 'Fahriims'], ['Fabricius']],
            [['Beilvre', 'BeliiSvre', 'BelliSvre', 'Bellilve'], ['de Bellièvre']],
            [['BircJmann', 'Bircftmann', 'Bircjpnann', 'Bircjtmann', 'Bircjtmann', 'Bircmann', 'Birermann', 'Bjfrrcmann'], ['Birckmann']]
        ]
        forename_corrections = [
            [['Matblas', 'Mathfcls', 'Mattblas', 'Mehlas'], ['Mathias']],
            [['Tkeoder', 'Hheodor'], ['Theodor']],
            [['Tpbias'], ['Tobias']],
            [['Victcr'], ['Victor']],
            [['Jeharmes', 'Jekazmes', 'Jokajmes', 'Jokämme', 'Jokannee', 'Joknnss', 'Jokaaae', 'Jakaanea', 'Jekeaaes', 'Jeharmes', 'Jehaaaea', 'Jokanaes'], ['Johannes']],
        ]
        place_corrections = [
            [['Cttujf', 'Cjbur', 'Gbur', 'tfhur', 'CL uv', 'CU w', 'Chfir', 'Chjpft', 'Ckar', 'Qiur', 'Cbra'], ['Chur']],
            [['Saanen'], ['Samaden']],
            [['Gi ef', 'Gjf', 's l Genf'], ['Genf']],
            [['S l', 'S t Xe', 's'], [None]]
        ]
        with open("Data/name_corr.txt", 'w') as f:
            for pair in name_corrections_general:
                fp = Person.query.filter_by(name=pair[0][0], vorname=pair[0][1], ort=pair[0][2]).all()
                if fp:
                    np = Person.query.filter_by(name=pair[1][0], vorname=pair[1][1], ort=pair[1][2]).first()
                    if not np:
                        np = Person(name=pair[1][0], forename=pair[1][1], place=pair[1][2], user=Config.ADMIN, time=datetime.now())
                        db.session.add(np)
                        db.session.commit()
                        np = Person.query.filter_by(name=pair[1][0], vorname=pair[1][1], ort=pair[1][2]).first()
                        f.write('NEW: '+(pair[1][0] if pair[1][0] else 's.n.')+", "+(pair[1][1] if pair[1][1] else 's.n.')+", "+(pair[1][2] if pair[1][2] else 's.l.')+"\n")
                    for p in fp:
                        f.write((p.name if p.name else 's.n.')+', '+(p.vorname if p.vorname else 's.n.')+', '+(p.ort if p.ort else 's.l.')+'\t-->\t'+(np.name if np.name else 's.n.')+', '+(np.vorname if np.vorname else 's.n.')+', '+(np.ort if np.ort else 's.l.')+"\n")
                        for e in Empfaenger.query.filter_by(id_person=p.id).all():
                            e.id_person = np.id
                            db.session.commit()
                            f.write('changed Empfänger on #'+str(e.id_brief)+".\n")
                        for a in Absender.query.filter_by(id_person=p.id).all():
                            a.id_person = np.id
                            db.session.commit()
                            f.write('changed Absender on #' + str(a.id_brief)+".\n")

            for pair in name_corrections:
                for n in pair[0]:
                    for p in Person.query.filter_by(name=n).all():
                        np = Person.query.filter_by(name=pair[1][0], vorname=p.vorname, ort=p.ort).first()
                        if not np:
                            np = Person(name=pair[1][0], forename=p.vorname, place=p.ort, user=Config.ADMIN, time=datetime.now())
                            db.session.add(np)
                            db.session.commit()
                            np = Person.query.filter_by(name=pair[1][0], vorname=p.vorname, ort=p.ort).first()
                            f.write('NEW: '+pair[1][0]+", "+(np.vorname if np.vorname else 's.n.')+", "+(np.ort if np.ort else 's.l.')+"\n")
                        f.write((p.name if p.name else 's.n.')+', '+(p.vorname if p.vorname else 's.n.')+', '+(p.ort if p.ort else 's.l.')+'\t-->\t'+pair[1][0]+", "+(p.vorname if p.vorname else 's.n.')+", "+(p.ort if p.ort else 's.l.')+"\n")
                        for e in Empfaenger.query.filter_by(id_person=p.id).all():
                            e.id_person = np.id
                            db.session.commit()
                            f.write('changed Empfänger on #'+str(e.id_brief)+".\n")
                        for a in Absender.query.filter_by(id_person=p.id).all():
                            a.id_person = np.id
                            db.session.commit()
                            f.write('changed Absender on #' + str(a.id_brief)+".\n")

            for pair in forename_corrections:
                for n in pair[0]:
                    for p in Person.query.filter_by(vorname=n).all():
                        np = Person.query.filter_by(name=p.name, vorname=pair[1][0], ort=p.ort).first()
                        if not np:
                            np = Person(name=p.name, forename=pair[1][0], place=p.ort, user=Config.ADMIN, time=datetime.now())
                            db.session.add(np)
                            db.session.commit()
                            np = Person.query.filter_by(name=p.name, vorname=pair[1][0], ort=p.ort).first()
                            f.write('NEW: '+(p.name if p.name else 's.n.')+", "+pair[1][0]+", "+(np.ort if p.ort else 's.l.')+"\n")
                        f.write((p.name if p.name else 's.n.')+', '+(p.vorname if p.vorname else 's.n.')+', '+(p.ort if p.ort else 's.l.')+'\t-->\t'+(p.name if p.name else 's.n.')+", "+pair[1][0]+", "+(p.ort if p.ort else 's.l.')+"\n")
                        for e in Empfaenger.query.filter_by(id_person=p.id).all():
                            e.id_person = np.id
                            db.session.commit()
                            f.write('changed Empfänger on card #'+str(e.id_brief)+".\n")
                        for a in Absender.query.filter_by(id_person=p.id).all():
                            a.id_person = np.id
                            db.session.commit()
                            f.write('changed Absender on card #' + str(a.id_brief)+".\n")

            for pair in place_corrections:
                for n in pair[0]:
                    for p in Person.query.filter_by(ort=n).all():
                        np = Person.query.filter_by(name=p.name, vorname=p.vorname, ort=pair[1][0]).first()
                        if not np:
                            np = Person(name=p.name, forename=p.vorname, place=pair[1][0], user=Config.ADMIN, time=datetime.now())
                            db.session.add(np)
                            db.session.commit()
                            np = Person.query.filter_by(name=p.name, vorname=p.vorname, ort=pair[1][0]).first()
                            f.write('NEW: '+(p.name if p.name else 's.n.')+", "+(p.vorname if p.vorname else 's.n.')+", "+pair[1][0]+"\n")
                        f.write((p.name if p.name else 's.n.')+', '+(p.vorname if p.vorname else 's.n.')+', '+(p.ort if p.ort else 's.l.')+'\t-->\t'+(p.name if p.name else 's.n.')+", "+(p.vorname if p.vorname else 's.n.')+", "+(pair[1][0] if pair[1][0] else 's.l.')+"\n")
                        for e in Empfaenger.query.filter_by(id_person=p.id).all():
                            e.id_person = np.id
                            db.session.commit()
                            f.write('changed Empfänger on #'+str(e.id_brief)+".\n")
                        for a in Absender.query.filter_by(id_person=p.id).all():
                            a.id_person = np.id
                            db.session.commit()
                            f.write('changed Absender on #' + str(a.id_brief)+".\n")

        with open("Data/sign_corr.txt", 'w') as f:
            f.write("AUTOGRAPH\n\n")
            for a in Autograph.query.filter_by(standort="Zürich StA").all():
                start = a.signatur
                if a.signatur:
                    for s in ["E ii", "E il", "E li", "E ll", "Eii", "Eil", "Eli", "Ell", "EU", "E U", "EII2", "II", "EIX"]:
                        if a.signatur[:len(s)] == s:
                            a.signatur = a.signatur.replace(s, '')
                            a.signatur = 'E II '+a.signatur.strip()
                            db.session.commit()
                    if 'f' in a.signatur:
                        new = a.signatur.replace('f', '').strip() + ' f'
                        if new != a.signatur:
                            a.signatur = new
                            db.session.commit()
                    for s in [' ,,,,', ',,,, ', ',,, ', ' ,,,', ' ,,', ',, ', ' ,',  ', ']:
                        a.signatur = a.signatur.replace(s, ' ')
                    for s in [',,,,,', ',,,,', ',,,', ',,']:
                        a.signatur = a.signatur.replace(s, ' ')
                    if a.signatur != start:
                        f.write('#'+str(a.id_brief)+':\t'+start + "\t-->\t" + a.signatur + "\n")
            f.write("\n\nKOPIE\n\n")
            for a in Kopie.query.filter_by(standort="Zürich StA").all():
                start = a.signatur
                if a.signatur:
                    for s in ["E ii", "E il", "E li", "E ll", "Eii", "Eil", "Eli", "Ell", "EU", "E U", "EII2", "II", "EIX"]:
                        if a.signatur[:len(s)] == s:
                            a.signatur = a.signatur.replace(s, '')
                            a.signatur = 'E II '+a.signatur.strip()
                            db.session.commit()
                    if 'f' in a.signatur:
                        new = a.signatur.replace('f', '').strip() + ' f'
                        if new != a.signatur:
                            a.signatur = new
                            db.session.commit()
                    for s in [' ,,,,', ',,,, ', ',,, ', ' ,,,', ' ,,', ',, ', ' ,',  ', ']:
                        a.signatur = a.signatur.replace(s, ' ')
                    for s in [',,,,,', ',,,,', ',,,', ',,']:
                        a.signatur = a.signatur.replace(s, ' ')
                    if a.signatur != start:
                        f.write('#'+str(a.id_brief)+':\t'+start + "\t-->\t" + a.signatur + "\n")

        return redirect(url_for('index'))
    return redirect(url_for('login', next=request.url))


@app.route('/admin/run_corrections2', methods=['GET'])
@login_required
def run_corrections2():
    if is_admin():

        zsta = "Zürich StA"
        with open("Data/zsta_corr2.txt", 'w') as f:
            f.write("AUTOGRAPH\n\n")
            for a in Autograph.query.all():
                p = NGrams.compute_similarity(zsta, a.standort, 3)
                if p > 0.8 and a.standort != zsta:
                    f.write('#' + str(a.id_brief) + ':\t' + a.standort + "\t-->\t" + zsta + "\n")
                    a.standort = zsta
                    db.session.commit()
            f.write("\n\nKOPIE\n\n")
            for a in Kopie.query.all():
                p = NGrams.compute_similarity(zsta, a.standort, 3)
                if p > 0.8 and a.standort != zsta:
                    f.write('#' + str(a.id_brief) + ':\t' + a.standort + "\t-->\t" + zsta + "\n")
                    a.standort = zsta
                    db.session.commit()

        zzb = "Zürich ZB"
        with open("Data/zb_corr2.txt", 'w') as f:
            f.write("AUTOGRAPH\n\n")
            for a in Autograph.query.all():
                p = NGrams.compute_similarity(zzb, a.standort, 3)
                if p > 0.8 and a.standort != zzb:
                    f.write('#' + str(a.id_brief) + ':\t' + a.standort + "\t-->\t" + zzb + "\n")
                    a.standort = zzb
                    db.session.commit()
            f.write("\n\nKOPIE\n\n")
            for a in Kopie.query.all():
                p = NGrams.compute_similarity(zzb, a.standort, 3)
                if p > 0.8 and a.standort != zzb:
                    f.write('#' + str(a.id_brief) + ':\t' + a.standort + "\t-->\t" + zzb + "\n")
                    a.standort = zzb
                    db.session.commit()

        with open("Data/sign_corr2.txt", 'w') as f:
            f.write("AUTOGRAPH\n\n")
            for a in Autograph.query.filter_by(standort="Zürich StA").all():
                start = a.signatur
                if a.signatur:
                    for s in ["E ii", "E il", "E li", "E ll", "Eii", "Eil", "Eli", "Ell", "EU", "E U", "EII2", "II", "EIX"]:
                        if a.signatur[:len(s)] == s:
                            a.signatur = a.signatur.replace(s, '')
                            a.signatur = 'E II '+a.signatur.strip()
                            db.session.commit()
                    m = re.match(r".*[^\W\d]{4,}.*", a.signatur)
                    if not m:
                        if 'f' in a.signatur:
                            new = a.signatur.replace('f', '').strip() + ' f'
                            if new != a.signatur:
                                a.signatur = new
                                db.session.commit()
                    m = re.match(r".*(\s*\,\,+\s*).*", a.signatur)
                    if m:
                        a.signatur = a.signatur.replace(m.group(1), ', ')
                        db.session.commit()
                    m = re.match(r".*\d(\s*\,\s*)\d.*", a.signatur)
                    if m and m.group(0):
                        a.signatur = a.signatur.replace(m.group(1), ',')
                        db.session.commit()
                    if a.signatur != start:
                        f.write('#'+str(a.id_brief)+':\t'+start + "\t-->\t" + a.signatur + "\n")
            f.write("\n\nKOPIE\n\n")
            for a in Kopie.query.filter_by(standort="Zürich StA").all():
                start = a.signatur
                if a.signatur:
                    for s in ["E ii", "E il", "E li", "E ll", "Eii", "Eil", "Eli", "Ell", "EU", "E U", "EII2", "II", "EIX"]:
                        if a.signatur[:len(s)] == s:
                            a.signatur = a.signatur.replace(s, '')
                            a.signatur = 'E II '+a.signatur.strip()
                            db.session.commit()
                    m = re.match(r".*[^\W\d]{4,}.*", a.signatur)
                    if not m:
                        if 'f' in a.signatur:
                            new = a.signatur.replace('f', '').strip() + ' f'
                            if new != a.signatur:
                                a.signatur = new
                                db.session.commit()
                    m = re.match(r".*(\s*\,\,+\s*).*", a.signatur)
                    if m:
                        a.signatur = a.signatur.replace(m.group(1), ', ')
                        db.session.commit()
                    m = re.match(r".*\d(\s*\,\s*)\d.*", a.signatur)
                    if m:
                        a.signatur = a.signatur.replace(m.group(1), ',')
                        db.session.commit()
                    if a.signatur != start:
                        f.write('#'+str(a.id_brief)+':\t'+start + "\t-->\t" + a.signatur + "\n")

        return redirect(url_for('index'))
    return redirect(url_for('login', next=request.url))

@app.route('/admin/convert_images', methods=['GET'])
def convert_to_images():
    input_path = "Karteikarten/PDF_new"
    output_path = "Karteikarten/PNG_new/HBBW_Karteikarte_"
    # output_path = "App/static/cards/HBBW_Karteikarte_"

    i = 1
    for file in FileSystem.get_file_paths(input_path):
        for page in convert_from_path(file, 600):
            print(file)
            path = output_path+(5-len(str(i)))*'0'+str(i)+'.png'
            page.save(path, 'PNG')
            i += 1
'''

'''
@app.route('/api/print_nn_vn_pairs', methods=['GET'])
def print_persons():
    persons = BullingerDB.get_persons_by_var(None, None)
    with open("Data/persons.txt", 'a') as out:
        pairs = set()
        for p in persons:
            if (p[0], p[1]) not in pairs:
                pairs.add((p[0], p[1]))
        for p in persons:
            if (p[0], p[1]) in pairs:
                out.write("#\t" + p[0] + '\t' + p[1] + '\n')
                pairs.remove((p[0], p[1]))
    return jsonify([])


@app.route('/api/print_locations', methods=['GET'])
def print_locations():
    with open("Data/locations.txt", 'w') as out:
        locs = set()
        d = CountDict()
        for p in Person.query.all():
            if p.ort:
                d.add(p.ort)
        print(d.get_pairs_sorted(by_value=True, reverse=True))
        for loc in d.get_pairs_sorted(by_value=True, reverse=True):
            if loc[0]:
                out.write("#\t" + loc[0] + '\n')
    return jsonify([])


@app.route('/api/compute_similarities', methods=['GET'])
def print_similarities():
    precisio = 4
    with open("Data/persons_corr.txt", 'w') as corr:
        with open("Data/persons.txt", 'r') as in_file:
            for line in in_file.readlines():
                if line.strip('\n') and line[0] != '#' and '\t' in line:
                    nn, vn = line.strip('\n').split('\t')
                    for p in Person.query.all():
                        s = (NGrams.compute_similarity(nn, p.name, precisio)+NGrams.compute_similarity(vn, p.vorname, precisio))/2
                        if s > 0.74 and s != 1.0:
                            corr.write(p.name + " " + p.vorname + "\t--->\t" + nn + " " + vn + "\n")
                            p.name, p.vorname = nn, vn
                            db.session.commit()
    with open("Data/locations_corr.txt", 'w') as corr:
        with open("Data/locations.txt", 'r') as in_file:
            for line in in_file.readlines():
                if line.strip('\n') and line[0] != '#':
                    loc = line.strip()
                    for p in Person.query.all():
                        if p.ort:
                            s = NGrams.compute_similarity(loc, p.ort, precisio)
                            if s > 0.74 and s != 1.0:
                                print(p.ort + "\t--->\t" + loc, s)
                                corr.write(p.ort + "\t--->\t" + loc + "\n")
                                p.ort = loc
                                db.session.commit()
    return jsonify([])
'''
